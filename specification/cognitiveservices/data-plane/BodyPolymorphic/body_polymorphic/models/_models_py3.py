# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6369, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional

import msrest.serialization


class FormField(msrest.serialization.Model):
    """FormField.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AddressesFormField, ContactNameFormField, ContactNamesFormField, DepartmentsFormField, EmailsFormField, FaxesFormField, JobTitlesFormField, MobilePhonesFormField, OtherPhonesFormField, ReceiptItemFormField, WebsitesFormField, WorkPhonesFormField, DateFormField, DictionaryFormField, FloatFormField, IntegerFormField, ListFormField, PhoneNumberFormField, SelectionMarkFormField, StringFormField, TimeFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param value: Any object.
    :type value: object
    :param precision:
    :type precision: float
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'precision': {'key': 'precision', 'type': 'float'},
    }

    _subtype_map = {
        'value_type': {'AddressesFormField': 'AddressesFormField', 'ContactNameFormField': 'ContactNameFormField', 'ContactNamesFormField': 'ContactNamesFormField', 'DepartmentsFormField': 'DepartmentsFormField', 'EmailsFormField': 'EmailsFormField', 'FaxesFormField': 'FaxesFormField', 'JobTitlesFormField': 'JobTitlesFormField', 'MobilePhonesFormField': 'MobilePhonesFormField', 'OtherPhonesFormField': 'OtherPhonesFormField', 'ReceiptItemFormField': 'ReceiptItemFormField', 'WebsitesFormField': 'WebsitesFormField', 'WorkPhonesFormField': 'WorkPhonesFormField', 'date': 'DateFormField', 'dictionary': 'DictionaryFormField', 'float': 'FloatFormField', 'integer': 'IntegerFormField', 'list': 'ListFormField', 'phoneNumber': 'PhoneNumberFormField', 'selectionMark': 'SelectionMarkFormField', 'string': 'StringFormField', 'time': 'TimeFormField'}
    }

    def __init__(
        self,
        *,
        value: Optional[object] = None,
        precision: Optional[float] = None,
        **kwargs
    ):
        super(FormField, self).__init__(**kwargs)
        self.value_type = None  # type: Optional[str]
        self.value = value
        self.precision = precision


class AddressesFormField(FormField):
    """AddressesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(AddressesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'AddressesFormField'  # type: str
        self.value = value


class ListFormField(FormField):
    """ListFormField.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CompanyNamesFormField, ReceiptItemsFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.FormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[FormField]'},
    }

    _subtype_map = {
        'value_type': {'CompanyNamesFormField': 'CompanyNamesFormField', 'ReceiptItemsFormField': 'ReceiptItemsFormField'}
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["FormField"]] = None,
        **kwargs
    ):
        super(ListFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'list'  # type: str
        self.value = value


class CompanyNamesFormField(ListFormField):
    """CompanyNamesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(CompanyNamesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'CompanyNamesFormField'  # type: str
        self.value = value


class ContactNameFormField(FormField):
    """ContactNameFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param value: Any object.
    :type value: object
    :param precision:
    :type precision: float
    :param first_name:
    :type first_name: ~body_polymorphic.models.StringFormField
    :param last_name:
    :type last_name: ~body_polymorphic.models.StringFormField
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'precision': {'key': 'precision', 'type': 'float'},
        'first_name': {'key': 'firstName', 'type': 'StringFormField'},
        'last_name': {'key': 'lastName', 'type': 'StringFormField'},
    }

    def __init__(
        self,
        *,
        value: Optional[object] = None,
        precision: Optional[float] = None,
        first_name: Optional["StringFormField"] = None,
        last_name: Optional["StringFormField"] = None,
        **kwargs
    ):
        super(ContactNameFormField, self).__init__(value=value, precision=precision, **kwargs)
        self.value_type = 'ContactNameFormField'  # type: str
        self.first_name = first_name
        self.last_name = last_name


class ContactNamesFormField(FormField):
    """ContactNamesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.ContactNameFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[ContactNameFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["ContactNameFormField"]] = None,
        **kwargs
    ):
        super(ContactNamesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'ContactNamesFormField'  # type: str
        self.value = value


class DateFormField(FormField):
    """DateFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: ~datetime.date
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'date'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[datetime.date] = None,
        **kwargs
    ):
        super(DateFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'date'  # type: str
        self.value = value


class DepartmentsFormField(FormField):
    """DepartmentsFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(DepartmentsFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'DepartmentsFormField'  # type: str
        self.value = value


class DictionaryFormField(FormField):
    """DictionaryFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value: Dictionary of :code:`<FormField>`.
    :type value: dict[str, ~body_polymorphic.models.FormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '{FormField}'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[Dict[str, "FormField"]] = None,
        **kwargs
    ):
        super(DictionaryFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'dictionary'  # type: str
        self.value = value


class EmailsFormField(FormField):
    """EmailsFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(EmailsFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'EmailsFormField'  # type: str
        self.value = value


class FaxesFormField(FormField):
    """FaxesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(FaxesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'FaxesFormField'  # type: str
        self.value = value


class FloatFormField(FormField):
    """FloatFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: float
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[float] = None,
        **kwargs
    ):
        super(FloatFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'float'  # type: str
        self.value = value


class IntegerFormField(FormField):
    """IntegerFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: int
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[int] = None,
        **kwargs
    ):
        super(IntegerFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'integer'  # type: str
        self.value = value


class JobTitlesFormField(FormField):
    """JobTitlesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(JobTitlesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'JobTitlesFormField'  # type: str
        self.value = value


class MobilePhonesFormField(FormField):
    """MobilePhonesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(MobilePhonesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'MobilePhonesFormField'  # type: str
        self.value = value


class OtherPhonesFormField(FormField):
    """OtherPhonesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(OtherPhonesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'OtherPhonesFormField'  # type: str
        self.value = value


class PhoneNumberFormField(FormField):
    """PhoneNumberFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: str
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(PhoneNumberFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'phoneNumber'  # type: str
        self.value = value


class ReceiptItemFormField(FormField):
    """ReceiptItemFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param value: Any object.
    :type value: object
    :param precision:
    :type precision: float
    :param name:
    :type name: ~body_polymorphic.models.StringFormField
    :param quantity:
    :type quantity: ~body_polymorphic.models.FloatFormField
    :param price:
    :type price: ~body_polymorphic.models.FloatFormField
    :param total_price:
    :type total_price: ~body_polymorphic.models.FloatFormField
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'precision': {'key': 'precision', 'type': 'float'},
        'name': {'key': 'name', 'type': 'StringFormField'},
        'quantity': {'key': 'quantity', 'type': 'FloatFormField'},
        'price': {'key': 'price', 'type': 'FloatFormField'},
        'total_price': {'key': 'totalPrice', 'type': 'FloatFormField'},
    }

    def __init__(
        self,
        *,
        value: Optional[object] = None,
        precision: Optional[float] = None,
        name: Optional["StringFormField"] = None,
        quantity: Optional["FloatFormField"] = None,
        price: Optional["FloatFormField"] = None,
        total_price: Optional["FloatFormField"] = None,
        **kwargs
    ):
        super(ReceiptItemFormField, self).__init__(value=value, precision=precision, **kwargs)
        self.value_type = 'ReceiptItemFormField'  # type: str
        self.name = name
        self.quantity = quantity
        self.price = price
        self.total_price = total_price


class ReceiptItemsFormField(ListFormField):
    """ReceiptItemsFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.ReceiptItemFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[ReceiptItemFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["ReceiptItemFormField"]] = None,
        **kwargs
    ):
        super(ReceiptItemsFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'ReceiptItemsFormField'  # type: str
        self.value = value


class RecognizedForm(msrest.serialization.Model):
    """Base model for arbitrary forms. Has an untyped set of fields that can be discovered.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required.
    :type doc_type: str
    """

    _validation = {
        'doc_type': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        **kwargs
    ):
        super(RecognizedForm, self).__init__(**kwargs)
        self.doc_type = doc_type


class RecognizedBusinessCard(RecognizedForm):
    """RecognizedBusinessCard.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required.
    :type doc_type: str
    :param fields: Required.
    :type fields: ~body_polymorphic.models.RecognizedBusinessCardFields
    """

    _validation = {
        'doc_type': {'required': True},
        'fields': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'fields': {'key': 'fields', 'type': 'RecognizedBusinessCardFields'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        fields: "RecognizedBusinessCardFields",
        **kwargs
    ):
        super(RecognizedBusinessCard, self).__init__(doc_type=doc_type, **kwargs)
        self.fields = fields


class RecognizedBusinessCardFields(msrest.serialization.Model):
    """RecognizedBusinessCardFields.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, ~body_polymorphic.models.FormField]
    :param company_names:
    :type company_names: ~body_polymorphic.models.CompanyNamesFormField
    :param contact_names:
    :type contact_names: ~body_polymorphic.models.ContactNamesFormField
    :param deparments:
    :type deparments: ~body_polymorphic.models.DepartmentsFormField
    :param job_titles:
    :type job_titles: ~body_polymorphic.models.JobTitlesFormField
    :param emails:
    :type emails: ~body_polymorphic.models.EmailsFormField
    :param websites:
    :type websites: ~body_polymorphic.models.WebsitesFormField
    :param addresses:
    :type addresses: ~body_polymorphic.models.AddressesFormField
    :param mobile_phones:
    :type mobile_phones: ~body_polymorphic.models.MobilePhonesFormField
    :param faxes:
    :type faxes: ~body_polymorphic.models.FaxesFormField
    :param work_phones:
    :type work_phones: ~body_polymorphic.models.WorkPhonesFormField
    :param other_phones:
    :type other_phones: ~body_polymorphic.models.OtherPhonesFormField
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{FormField}'},
        'company_names': {'key': 'companyNames', 'type': 'CompanyNamesFormField'},
        'contact_names': {'key': 'contactNames', 'type': 'ContactNamesFormField'},
        'deparments': {'key': 'deparments', 'type': 'DepartmentsFormField'},
        'job_titles': {'key': 'jobTitles', 'type': 'JobTitlesFormField'},
        'emails': {'key': 'emails', 'type': 'EmailsFormField'},
        'websites': {'key': 'websites', 'type': 'WebsitesFormField'},
        'addresses': {'key': 'addresses', 'type': 'AddressesFormField'},
        'mobile_phones': {'key': 'mobilePhones', 'type': 'MobilePhonesFormField'},
        'faxes': {'key': 'faxes', 'type': 'FaxesFormField'},
        'work_phones': {'key': 'workPhones', 'type': 'WorkPhonesFormField'},
        'other_phones': {'key': 'otherPhones', 'type': 'OtherPhonesFormField'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, "FormField"]] = None,
        company_names: Optional["CompanyNamesFormField"] = None,
        contact_names: Optional["ContactNamesFormField"] = None,
        deparments: Optional["DepartmentsFormField"] = None,
        job_titles: Optional["JobTitlesFormField"] = None,
        emails: Optional["EmailsFormField"] = None,
        websites: Optional["WebsitesFormField"] = None,
        addresses: Optional["AddressesFormField"] = None,
        mobile_phones: Optional["MobilePhonesFormField"] = None,
        faxes: Optional["FaxesFormField"] = None,
        work_phones: Optional["WorkPhonesFormField"] = None,
        other_phones: Optional["OtherPhonesFormField"] = None,
        **kwargs
    ):
        super(RecognizedBusinessCardFields, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.company_names = company_names
        self.contact_names = contact_names
        self.deparments = deparments
        self.job_titles = job_titles
        self.emails = emails
        self.websites = websites
        self.addresses = addresses
        self.mobile_phones = mobile_phones
        self.faxes = faxes
        self.work_phones = work_phones
        self.other_phones = other_phones


class RecognizedInvoice(RecognizedForm):
    """RecognizedInvoice.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required.
    :type doc_type: str
    :param fields: Required.
    :type fields: ~body_polymorphic.models.RecognizedInvoiceFormFields
    """

    _validation = {
        'doc_type': {'required': True},
        'fields': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'fields': {'key': 'fields', 'type': 'RecognizedInvoiceFormFields'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        fields: "RecognizedInvoiceFormFields",
        **kwargs
    ):
        super(RecognizedInvoice, self).__init__(doc_type=doc_type, **kwargs)
        self.fields = fields


class RecognizedInvoiceFormFields(msrest.serialization.Model):
    """RecognizedInvoiceFormFields.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, ~body_polymorphic.models.FormField]
    :param customer_name:
    :type customer_name: ~body_polymorphic.models.StringFormField
    :param customer_id:
    :type customer_id: ~body_polymorphic.models.StringFormField
    :param purchase_order:
    :type purchase_order: ~body_polymorphic.models.StringFormField
    :param invoice_id:
    :type invoice_id: ~body_polymorphic.models.StringFormField
    :param invoice_date:
    :type invoice_date: ~body_polymorphic.models.DateFormField
    :param due_date:
    :type due_date: ~body_polymorphic.models.DateFormField
    :param vendor_name:
    :type vendor_name: ~body_polymorphic.models.StringFormField
    :param vendor_address:
    :type vendor_address: ~body_polymorphic.models.StringFormField
    :param vendor_address_recipient:
    :type vendor_address_recipient: ~body_polymorphic.models.StringFormField
    :param customer_address:
    :type customer_address: ~body_polymorphic.models.StringFormField
    :param customer_address_recipient:
    :type customer_address_recipient: ~body_polymorphic.models.StringFormField
    :param billing_address:
    :type billing_address: ~body_polymorphic.models.StringFormField
    :param billing_address_recipient:
    :type billing_address_recipient: ~body_polymorphic.models.StringFormField
    :param shipping_address:
    :type shipping_address: ~body_polymorphic.models.StringFormField
    :param shipping_address_recipient:
    :type shipping_address_recipient: ~body_polymorphic.models.StringFormField
    :param sub_total:
    :type sub_total: ~body_polymorphic.models.FloatFormField
    :param total_tax:
    :type total_tax: ~body_polymorphic.models.FloatFormField
    :param invoice_total:
    :type invoice_total: ~body_polymorphic.models.FloatFormField
    :param previous_unpaid_balance:
    :type previous_unpaid_balance: ~body_polymorphic.models.FloatFormField
    :param amount_due:
    :type amount_due: ~body_polymorphic.models.FloatFormField
    :param service_start_date:
    :type service_start_date: ~body_polymorphic.models.DateFormField
    :param service_end_date:
    :type service_end_date: ~body_polymorphic.models.DateFormField
    :param service_address:
    :type service_address: ~body_polymorphic.models.StringFormField
    :param service_address_recipient:
    :type service_address_recipient: ~body_polymorphic.models.StringFormField
    :param remittance_address:
    :type remittance_address: ~body_polymorphic.models.StringFormField
    :param remittance_address_recipient:
    :type remittance_address_recipient: ~body_polymorphic.models.StringFormField
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{FormField}'},
        'customer_name': {'key': 'CustomerName', 'type': 'StringFormField'},
        'customer_id': {'key': 'CustomerId', 'type': 'StringFormField'},
        'purchase_order': {'key': 'PurchaseOrder', 'type': 'StringFormField'},
        'invoice_id': {'key': 'InvoiceId', 'type': 'StringFormField'},
        'invoice_date': {'key': 'InvoiceDate', 'type': 'DateFormField'},
        'due_date': {'key': 'DueDate', 'type': 'DateFormField'},
        'vendor_name': {'key': 'VendorName', 'type': 'StringFormField'},
        'vendor_address': {'key': 'VendorAddress', 'type': 'StringFormField'},
        'vendor_address_recipient': {'key': 'VendorAddressRecipient', 'type': 'StringFormField'},
        'customer_address': {'key': 'CustomerAddress', 'type': 'StringFormField'},
        'customer_address_recipient': {'key': 'CustomerAddressRecipient', 'type': 'StringFormField'},
        'billing_address': {'key': 'BillingAddress', 'type': 'StringFormField'},
        'billing_address_recipient': {'key': 'BillingAddressRecipient', 'type': 'StringFormField'},
        'shipping_address': {'key': 'ShippingAddress', 'type': 'StringFormField'},
        'shipping_address_recipient': {'key': 'ShippingAddressRecipient', 'type': 'StringFormField'},
        'sub_total': {'key': 'SubTotal', 'type': 'FloatFormField'},
        'total_tax': {'key': 'TotalTax', 'type': 'FloatFormField'},
        'invoice_total': {'key': 'InvoiceTotal', 'type': 'FloatFormField'},
        'previous_unpaid_balance': {'key': 'PreviousUnpaidBalance', 'type': 'FloatFormField'},
        'amount_due': {'key': 'AmountDue', 'type': 'FloatFormField'},
        'service_start_date': {'key': 'ServiceStartDate', 'type': 'DateFormField'},
        'service_end_date': {'key': 'ServiceEndDate', 'type': 'DateFormField'},
        'service_address': {'key': 'ServiceAddress', 'type': 'StringFormField'},
        'service_address_recipient': {'key': 'ServiceAddressRecipient', 'type': 'StringFormField'},
        'remittance_address': {'key': 'RemittanceAddress', 'type': 'StringFormField'},
        'remittance_address_recipient': {'key': 'RemittanceAddressRecipient', 'type': 'StringFormField'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, "FormField"]] = None,
        customer_name: Optional["StringFormField"] = None,
        customer_id: Optional["StringFormField"] = None,
        purchase_order: Optional["StringFormField"] = None,
        invoice_id: Optional["StringFormField"] = None,
        invoice_date: Optional["DateFormField"] = None,
        due_date: Optional["DateFormField"] = None,
        vendor_name: Optional["StringFormField"] = None,
        vendor_address: Optional["StringFormField"] = None,
        vendor_address_recipient: Optional["StringFormField"] = None,
        customer_address: Optional["StringFormField"] = None,
        customer_address_recipient: Optional["StringFormField"] = None,
        billing_address: Optional["StringFormField"] = None,
        billing_address_recipient: Optional["StringFormField"] = None,
        shipping_address: Optional["StringFormField"] = None,
        shipping_address_recipient: Optional["StringFormField"] = None,
        sub_total: Optional["FloatFormField"] = None,
        total_tax: Optional["FloatFormField"] = None,
        invoice_total: Optional["FloatFormField"] = None,
        previous_unpaid_balance: Optional["FloatFormField"] = None,
        amount_due: Optional["FloatFormField"] = None,
        service_start_date: Optional["DateFormField"] = None,
        service_end_date: Optional["DateFormField"] = None,
        service_address: Optional["StringFormField"] = None,
        service_address_recipient: Optional["StringFormField"] = None,
        remittance_address: Optional["StringFormField"] = None,
        remittance_address_recipient: Optional["StringFormField"] = None,
        **kwargs
    ):
        super(RecognizedInvoiceFormFields, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.customer_name = customer_name
        self.customer_id = customer_id
        self.purchase_order = purchase_order
        self.invoice_id = invoice_id
        self.invoice_date = invoice_date
        self.due_date = due_date
        self.vendor_name = vendor_name
        self.vendor_address = vendor_address
        self.vendor_address_recipient = vendor_address_recipient
        self.customer_address = customer_address
        self.customer_address_recipient = customer_address_recipient
        self.billing_address = billing_address
        self.billing_address_recipient = billing_address_recipient
        self.shipping_address = shipping_address
        self.shipping_address_recipient = shipping_address_recipient
        self.sub_total = sub_total
        self.total_tax = total_tax
        self.invoice_total = invoice_total
        self.previous_unpaid_balance = previous_unpaid_balance
        self.amount_due = amount_due
        self.service_start_date = service_start_date
        self.service_end_date = service_end_date
        self.service_address = service_address
        self.service_address_recipient = service_address_recipient
        self.remittance_address = remittance_address
        self.remittance_address_recipient = remittance_address_recipient


class RecognizedReceipt(RecognizedForm):
    """RecognizedReceipt.

    All required parameters must be populated in order to send to Azure.

    :param doc_type: Required.
    :type doc_type: str
    :param fields: Required.
    :type fields: ~body_polymorphic.models.RecognizedReceiptFields
    """

    _validation = {
        'doc_type': {'required': True},
        'fields': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'fields': {'key': 'fields', 'type': 'RecognizedReceiptFields'},
    }

    def __init__(
        self,
        *,
        doc_type: str,
        fields: "RecognizedReceiptFields",
        **kwargs
    ):
        super(RecognizedReceipt, self).__init__(doc_type=doc_type, **kwargs)
        self.fields = fields


class RecognizedReceiptFields(msrest.serialization.Model):
    """RecognizedReceiptFields.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, ~body_polymorphic.models.FormField]
    :param receipt_type:
    :type receipt_type: ~body_polymorphic.models.StringFormField
    :param merchant_name:
    :type merchant_name: ~body_polymorphic.models.StringFormField
    :param transaction_date:
    :type transaction_date: ~body_polymorphic.models.DateFormField
    :param transaction_time:
    :type transaction_time: ~body_polymorphic.models.TimeFormField
    :param receipt_items:
    :type receipt_items: ~body_polymorphic.models.ReceiptItemsFormField
    :param subtotal:
    :type subtotal: ~body_polymorphic.models.FloatFormField
    :param tax:
    :type tax: ~body_polymorphic.models.FloatFormField
    :param tip:
    :type tip: ~body_polymorphic.models.FloatFormField
    :param total:
    :type total: ~body_polymorphic.models.FloatFormField
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{FormField}'},
        'receipt_type': {'key': 'receiptType', 'type': 'StringFormField'},
        'merchant_name': {'key': 'merchantName', 'type': 'StringFormField'},
        'transaction_date': {'key': 'transactionDate', 'type': 'DateFormField'},
        'transaction_time': {'key': 'transactionTime', 'type': 'TimeFormField'},
        'receipt_items': {'key': 'receiptItems', 'type': 'ReceiptItemsFormField'},
        'subtotal': {'key': 'subtotal', 'type': 'FloatFormField'},
        'tax': {'key': 'tax', 'type': 'FloatFormField'},
        'tip': {'key': 'tip', 'type': 'FloatFormField'},
        'total': {'key': 'total', 'type': 'FloatFormField'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, "FormField"]] = None,
        receipt_type: Optional["StringFormField"] = None,
        merchant_name: Optional["StringFormField"] = None,
        transaction_date: Optional["DateFormField"] = None,
        transaction_time: Optional["TimeFormField"] = None,
        receipt_items: Optional["ReceiptItemsFormField"] = None,
        subtotal: Optional["FloatFormField"] = None,
        tax: Optional["FloatFormField"] = None,
        tip: Optional["FloatFormField"] = None,
        total: Optional["FloatFormField"] = None,
        **kwargs
    ):
        super(RecognizedReceiptFields, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.receipt_type = receipt_type
        self.merchant_name = merchant_name
        self.transaction_date = transaction_date
        self.transaction_time = transaction_time
        self.receipt_items = receipt_items
        self.subtotal = subtotal
        self.tax = tax
        self.tip = tip
        self.total = total


class SelectionMarkFormField(FormField):
    """SelectionMarkFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: str
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(SelectionMarkFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'selectionMark'  # type: str
        self.value = value


class StringFormField(FormField):
    """StringFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: str
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(StringFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'string'  # type: str
        self.value = value


class TimeFormField(FormField):
    """TimeFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: ~datetime.time
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': 'time'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[datetime.time] = None,
        **kwargs
    ):
        super(TimeFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'time'  # type: str
        self.value = value


class WebsitesFormField(FormField):
    """WebsitesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(WebsitesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'WebsitesFormField'  # type: str
        self.value = value


class WorkPhonesFormField(FormField):
    """WorkPhonesFormField.

    All required parameters must be populated in order to send to Azure.

    :param value_type: Required. Constant filled by server.  Possible values include: "string",
     "date", "time", "phoneNumber", "float", "integer", "list", "dictionary", "selectionMark".
    :type value_type: str or ~body_polymorphic.models.Value
    :param precision:
    :type precision: float
    :param value:
    :type value: list[~body_polymorphic.models.StringFormField]
    """

    _validation = {
        'value_type': {'required': True},
        'precision': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'value_type': {'key': 'valueType', 'type': 'str'},
        'precision': {'key': 'precision', 'type': 'float'},
        'value': {'key': 'value', 'type': '[StringFormField]'},
    }

    def __init__(
        self,
        *,
        precision: Optional[float] = None,
        value: Optional[List["StringFormField"]] = None,
        **kwargs
    ):
        super(WorkPhonesFormField, self).__init__(precision=precision, **kwargs)
        self.value_type = 'WorkPhonesFormField'  # type: str
        self.value = value
